#! /usr/bin/env bash

# NOTE this file was generated by gcc-options-parser.sh.mako

# TODO remove preprocessor args from the final compiler call -> -D -I ...

remove_linemarkers=true # add -P to preprocessor call. this breaks debug info

dry_run=true # dont call gcc, just print args

gccPath="$1"
shift

args=("$@")

# used for all input files
constArgs=()
globalArgIdxList=()

# default values
inPathList=()
inLangList=() # TODO use these in the last compile/assemble/link step only for the unprocessed files
inLang=none
#oPath=a.out
oPath=



cLangExtPatt=" c h C H cc hh cpp hpp cxx hxx c++ h++ CPP HPP cp hp tcc "

declare -A tmpExtOfInExt
tmpExtOfInExt=( [c]=i [h]=gch [C]=ii [H]=gch [cc]=ii [hh]=gch [cpp]=ii [hpp]=gch [cxx]=ii [hxx]=gch [c++]=ii [h++]=gch [CPP]=ii [HPP]=gch [cp]=ii [hp]=gch [tcc]=ii )
declare -A tmpExtOfInLang
tmpExtOfInLang=( [c]=i [c-header]=gch [cpp-output]=o [c++]=ii [c++-header]=gch [c++-system-header]=gch [c++-user-header]=gch [c++-cpp-output]=o )

# TODO verify: cpp-output = C PreProcessor output? -> tmpExt is o?
# TODO verify: c++-cpp-output = C++ PreProcessor output? -> tmpExt is o?

# when should gcc stop?

stopE=
stopS=
stopC=

for ((i = 0; i < ${#args[@]}; i++ ))
do
  a=${args[$i]}
  case "$a" in
    -o*)
      [ -n "$oPath" ] && { echo "error: can have only one output. old: $oPath. new: $a"; exit 1; }
      if [ "$a" != "-o" ]; then oPath=${a:2}; else : $((i++)); oPath=${args[$i]}; fi
      #echo "o: $oPath"
    ;;
    -x*)
      if [ "$a" != "-x" ]; then inLang=${a:2}; else : $((i++)); inLang=${args[$i]}; fi
      #echo "f: $inLang"
    ;;
    -E) stopE=1;;
    -S) stopS=1;;
    -c) stopC=1;;
    -frandom-seed=*);; # ignore
    -T|-e|-R|-A|-L|-G|-z|-I|-U|-h|-l|-F|-u|-B|-D|-J|-Hd|-Xf|-MQ|-Hf|-MD|-MT|-MF|-MMD|-init|-Tbss|-arch|--dump|-rpath|-Tdata|-gnatO|-specs|-Ttext|-iquote|-soname|-assert|-defsym|--specs|--entry|--assert|-wrapper|-segprot|--output|-isystem|-iprefix|-segaddr|-imacros|-Xlinker|-include|--prefix|-dumpdir|--include|-seg1addr|-isysroot|--sysroot|-filelist|--dumpdir|-dumpbase|--imacros|-aux-info|--dumpbase|-undefined|-sectorder|-idirafter|--language|-sectalign|-segcreate|-framework|-imultilib|-rpath-link|-iframework|-Xassembler|-sectcreate|-imultiarch|-image_base|-dylib_file|--for-linker|-iwithprefix|-client_name|-sub_library|--output-pch|--force-link|-sub_umbrella|-dumpbase-ext|-install_name|--dumpbase-ext|-bundle_loader|--define-macro|-Xpreprocessor|-pagezero_size|-mtarget-linker|--for-assembler|-seg_addr_table|-current_version|--include-prefix|-dependency-file|--undefine-macro|--print-file-name|-read_only_relocs|-allowable_client|--print-prog-name|-multiply_defined|-msmall-data-limit|-iwithprefixbefore|-sectobjectsymbols|--library-directory|--include-directory|-segs_read_only_addr|--write-dependencies|-segs_read_write_addr|--include-with-prefix|-dylinker_install_name|-exported_symbols_list|-compatibility_version|-multiply_defined_unused|-unexported_symbols_list|-seg_addr_table_filename|-fintrinsic-modules-path|--include-directory-after|--write-user-dependencies|-weak_reference_mismatches|--include-with-prefix-after|--include-with-prefix-before)
      globalArgIdxList+=($i)
      : $((i++))
      globalArgIdxList+=($i)
      b=${args[$i]}
      #echo "2: $a $b"
    ;;
    -*)
      #echo "1: $a"
      globalArgIdxList+=($i)
    ;;
    @*)
      argsFile="${a:1}"
      [ ! -e "$argsFile" ] && { echo "error parsing option $a: no such file"; exit 1; }
      eval "fileArgs=( $(cat "$argsFile") )" # WARNING eval is unsafe
      args=( "${args[@]:0:$i}" "${fileArgs[@]}" "${args[@]:$((i + 1))}" )
      argsLen=${#args[@]}
      : $((i--))
    ;;
    *)
      inPathList+=("$a")
      if [ ! -e "$a" ];
      then
        echo "error: missing input file: $a"
        exit 1
      fi
      inPathIdxList+=("$i")
      if [ "$inLang" = "none" ]
      then
        ext="${a##*.}"
        if [ "$ext" = "$a" ]; then inLangList+=("_ld")
        elif [[ "$cLangExtPatt" = *" $ext "* ]]; then inLangList+=("_cfam")
        else inLangList+=("_not_cfam")
        fi
      else
        inLangList+=("$inLang")
      fi
      #echo "i: $a [format: ${inLangList[ -1]}]"
    ;;
  esac
done


if [[ $stopE || $stopS ]];
then
  echo "dont preprocess <- stopE=$stopE stopS=$stopS stopC=$stopC"
  echo "$gccPath" "${args[@]}"
  $dry_run || "$gccPath" "${args[@]}"
  exit
fi


# split the gcc command line -> one call per source file
# NOT. TODO run gcc calls in parallel # not: already done by cmake

if false; then
  echo original args
  for (( i=0; i<${#args[@]}; i++ ))
  do
    echo "arg $i: ${args[$i]}"
  done

  echo global args
  for i in ${globalArgIdxList[@]}
  do
    echo "arg $i: ${args[$i]}"
  done
fi

tmpPathIdxList=()
tmpPathList=()
tmpLangList=()

# TODO preprocess only C/C++ sources
echo preprocess args:
for (( i=0; i<${#inPathList[@]}; i++ ))
do
  inPathIdx=${inPathIdxList[$i]}
  inPath=${inPathList[$i]}
  inLang=${inLangList[$i]}
  tmpPathIdxList+=($inPathIdx)
  if [[ "$inLang" != "_ld" && "$inLang" != "_not_cfam" ]]
  then
    #echo "arg $inPathIdx -> input $i: path $inPath + lang = $inLang"
    inArgs=()
    doneInPath=
    for idx in ${globalArgIdxList[@]}; do
      if [[ ! $doneInPath && $idx -gt $inPathIdx ]]; then
        # insert input-path argument at original index
        if [ "$inLang" != "_cfam" ]; then
          inArgs+=(-x "$inLang")
        fi
        inArgs+=("$inPath")
        doneInPath=1
      fi
      inArgs+=("${args[$idx]}")
    done
    # insert input-path argument at end
    if [[ ! $doneInPath ]]; then
      inArgs+=("$inPath")
    fi

    inExt=${inPath##*.}
    tmpExt=${tmpExtOfInExt[$inExt]}
    #echo "tmpExt = $tmpExt from ext $inExt"
    # if language was set ...
    if [ "$inLang" != "_cfam" ]; then
      tmpExt=${tmpExtOfInLang[$inLang]}
      #echo "tmpExt = $tmpExt from lang $inLang"
      if [ -z "$tmpExt" ]; then
        # not a cfam language -> dont preprocess
        #echo "dont preprocess input $i: path $inPath + lang = $inLang"
        tmpPathList+=("$inPath")
        tmpLangList+=("$inLang")
        continue
      fi
    fi
    #tmpName=$(echo "$inPath" | tr / _)
    tmpName="$(basename "$inPath")"
    tmpName=${tmpName%.*}
    [ ${#tmpName} -gt 200 ] && tmpName=${tmpName: -200} # max 255 chars
    #tmpPath="/tmp/$tmpName.$tmpExt"
    #tmpPath="$(mktemp "/tmp/$tmpName-XXXXX.$tmpExt")" # must not be random! reproducible builds.
    tmpPath="/tmp/$(nix-hash --base32 "$inPath")-$tmpName.$tmpExt"
    # nix-hash -> 26 chars
    # 255 - 1 - 26 = 228
    tmpPathList+=("$tmpPath")
    tmpLangList+=("_cfam_prep") # prep = preprocessed

    inArgs+=("-o" "$tmpPath")
    inArgs+=("-E") # stop after preprocess
    $remove_linemarkers && inArgs+=("-P") # remove linemarkers#
      inArgs+=("-frandom-seed=$tmpPath")

    echo "$gccPath" "${inArgs[@]}"
    $dry_run || "$gccPath" "${inArgs[@]}"

    # TODO run gcc
    # TODO run gcc in background, wait for all to finish
    # TODO patch all temp files in one sed call
    # TODO
  else
    #echo "dont preprocess input $i: path $inPath + lang = $inLang"
    tmpPathList+=("$inPath")
    tmpLangList+=("$inLang")
  fi

done




# array_indexof without echo
function array_contains() {
  [ $# -lt 2 ] && return 1
  local a=("$@")
  local v="${a[-1]}"
  unset a[-1]
  local i
  for i in ${!a[@]}; do
    if [ "${a[$i]}" = "$v" ]; then
      #echo $i
      return 0 # stop after first match
    fi
  done
  return 1
}

# https://stackoverflow.com/a/70793702/10440128
function array_indexof() {
  [ $# -lt 2 ] && return 1
  local a=("$@")
  local v="${a[-1]}"
  unset a[-1]
  local i
  for i in ${!a[@]}; do
    if [ "${a[$i]}" = "$v" ]; then
      echo $i
      return 0 # stop after first match
    fi
  done
  return 1
}


inArgs=()
iMax=${#args[@]}
for (( i=0; i<$iMax; i++ )); do
  a="${args[$i]}"
  #echo "i = $i + a = $a" # debug
  if array_contains "${globalArgIdxList[@]}" $i
  then
    inArgs+=("$a")
  else
    tmpIdx=$(array_indexof "${inPathIdxList[@]}" $i)
    [ -n "$tmpIdx" ] && inArgs+=(${tmpPathList[$tmpIdx]})
  fi
done



# TODO add output arg?
# TODO add -frandom-seed=xxx arg?

if [ -n "$oPath" ]; then
  inArgs+=("-o" "$oPath")
fi

if [[ $stopC ]]; then
  inArgs+=("-c")
fi

# fix sort order
export LC_ALL=C
export LANG=C

# TODO maybe avoid hashing file paths, instead, hash the file contents
randomSeed=$(printf '%s
' "${tmpPathList[@]}" | sort | nix-hash --base32 /dev/stdin)
inArgs+=("-frandom-seed=$randomSeed")

echo final args:
echo "$gccPath" "${inArgs[@]}"
$dry_run || "$gccPath" "${inArgs[@]}"


